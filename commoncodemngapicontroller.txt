package com.korearms.system.commoncodemng.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.data.web.SortDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.annotation.JsonView;
import com.korearms.common.support.ApiControllerSupport;
import com.korearms.system.commoncodemng.service.CommonCodeMngService;
import com.korearms.system.commoncodemng.vo.MainCodeVO;

import framework.spring.web.rest.AbleResponseEntity;
import framework.spring.web.rest.AbleResponseEntityBuilder;
import framework.vo.SearchMap;

/**
 * 공통코드관리 API Controller
 * @author Kyungsik Jeung
 *
 */
@Controller
//@PreAuthorize("hasAuthority('ROLE_USER_MNG')")
@RequestMapping(value = "/admin/system/commoncodemng/api")
public class CommonCodeMngAPIController extends ApiControllerSupport {

	@Autowired CommonCodeMngService commonCodeMngService;

	/** 목록 조회 */
	@JsonView(MainCodeVO.BaseView.class)
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public AbleResponseEntity<?> getListAll(
			HttpServletRequest request,
			@SortDefault(sort = "mainCode", direction=Direction.ASC) Sort sort,
			Model model) {
		SearchMap searchMap = SearchMap.buildFrom(request);
		List<MainCodeVO> list = commonCodeMngService.getListAll(sort, searchMap);
		return AbleResponseEntityBuilder.success(list);
	}

	/** 페이징 조회 */
	@JsonView(MainCodeVO.BaseView.class)
	@RequestMapping(value = "/page", method = RequestMethod.GET)
	public @ResponseBody AbleResponseEntity<?> getList(
			HttpServletRequest request,
			@PageableDefault(sort = "mainCode", direction=Direction.ASC) Pageable pageable,
			Model model) {
		SearchMap searchMap = SearchMap.buildFrom(request);
		Page<MainCodeVO> page = commonCodeMngService.getList(pageable, searchMap);
		return AbleResponseEntityBuilder.success(page);
	}

/*	*//** 상세 *//*
	@RequestMapping(value = "/details/{mainCode}", method = RequestMethod.GET)
	public @ResponseBody AbleResponseEntity<?> details(
			@PathVariable("mainCode") long mainCode,
			Model model) {
		SubCodeMngVO ro = commonCodeMngService.getManagerDetailsByManagerseq(mainCode);
		return AbleResponseEntityBuilder.success(ro);
	}*/

	/** 등록 *//*
	@RequestMapping(value = "/details/insert", method = RequestMethod.POST)
	public @ResponseBody AbleResponseEntity<?> insert(
			HttpServletRequest request,
			@RequestBody @Validated({ManagerMngVO.CreateAction.class}) ManagerMngVO actionVO, BindingResult error) {
		logger.debug("vo: {}", actionVO);
		if(error.hasErrors()) {
			logger.trace("error: {}", error);
			throw new AbleValidationException(error);
		}
		managerMngService.insert(actionVO);

//		insertAdminAudit(request, "회원수정", actionVO.toStringAdminAuditDetails());
		return AbleResponseEntityBuilder.success(null);
	}

	*//** 수정 *//*
	@RequestMapping(value = "/details/update/{managerSeq}", method = RequestMethod.POST)
	public @ResponseBody AbleResponseEntity<?> update(
			HttpServletRequest request,
			@PathVariable("managerSeq") long managerSeq,
			@RequestBody @Validated({ManagerMngVO.UpdateAction.class}) ManagerMngVO actionVO, BindingResult error) {
		logger.debug("managerSeq: {}, vo: {}", managerSeq, actionVO);
		if(error.hasErrors()) {
			logger.trace("error: {}", error);
			throw new AbleValidationException(error);
		}
		//회원이 존재하는지 체크
		if ( !this.validateUserExistance(managerSeq) ){
			throw new AbleRuntimeException("수정하려는 회원이 존재하지 않습니다.");
		}
		actionVO.setManagerSeq(managerSeq);
		managerMngService.update(actionVO);

//		insertAdminAudit(request, "회원수정", actionVO.toStringAdminAuditDetails());
		return AbleResponseEntityBuilder.success(null);
	}

	*//** 삭제 *//*
	@RequestMapping(value = "/details/delete/{managerSeq}", method = RequestMethod.POST)
	public @ResponseBody AbleResponseEntity<?> delete(
			HttpServletRequest request,
		@PathVariable("managerSeq") int managerSeq) {
		logger.debug("managerSeq: {}", managerSeq);

		//회원이 존재하는지 체크
		if ( this.validateUserExistance(managerSeq) ){
			managerMngService.delete(managerSeq);
//			insertAdminAudit(request, "회원삭제", waitApplyMngVO.toStringAdminAuditDetails());
		}

		return AbleResponseEntityBuilder.success(null);
	}

	*//** 수정, 삭제 공통 체크 - 회원이 존재하는지 체크 *//*
	private boolean validateUserExistance(long managerSeq){
		return (managerMngService.getManagerDetailsByManagerseq(managerSeq) != null);
	}

	*//**
	 * 관리자감사로그
	 *//*
//	private void insertAdminAudit(HttpServletRequest request, String detailsTitle, String toStringAdminAuditDetails) {
//		super.insertAdminAudit("회원관리", detailsTitle + "-" + toStringAdminAuditDetails, getME().getMberLoginEmail(), getME().getMberNm(), request.getRemoteAddr());
//	}
*/}
