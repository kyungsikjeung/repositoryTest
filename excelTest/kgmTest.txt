package _test.dev.kgm;

import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;

import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.util.CellRangeAddress;
import org.jooq.tools.StringUtils;
import org.junit.BeforeClass;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import _test.base.TestSupport;
import framework.spring.web.view.AbleExcelCommand;
import framework.spring.web.view.AbleExcelCommand2;
import framework.spring.web.view.AbleExcelMergeMode;

public class KgmTest extends TestSupport {

	protected Logger logger = LoggerFactory.getLogger(this.getClass());

	@BeforeClass
	public static void setUpClass() throws Exception {
		System.setProperty("logback.configurationFile", "config/logback-junit.xml");
		if (StringUtils.isEmpty("spring.profiles.active")) {
			System.setProperty("spring.profiles.active", "dev");
		}
	}

	/** ¿¢¼¿ ¿öÅ©ºÏ*/
	protected HSSFWorkbook workbook;

//    @Test
//	public void aaa() throws Exception {
//
//		String title = "testTitle";
//		String head = "A,B,C,D";
//		String row1 = "1,2,3,4";
//		String row2 = "5,6,7,8";
//
//		ArrayList<String> headerList = new ArrayList<String>(Arrays.asList(head.split(",")));
//		ArrayList<ArrayList<String>> rowsList = new ArrayList<ArrayList<String>>();
//		ArrayList<String> rowdata1 = new ArrayList<String>(Arrays.asList(row1.split(",")));
//		ArrayList<String> rowdata2 = new ArrayList<String>(Arrays.asList(row2.split(",")));
//		rowsList.add(rowdata1);
//		rowsList.add(rowdata2);
//
//		Workbook wb = new HSSFWorkbook();
//		Sheet sheet = wb.createSheet("test");
//		sheet.setDefaultColumnWidth(1300);
//		Row row = null;
//		Cell cell = null;
//		int rowNo = 0;
//		int colNo = 0;
//		int maxCol = headerList.size();
//
//
//		// Title Font
//		Font titleFont = wb.createFont();
//		titleFont.setFontHeightInPoints((short) 20);
//		titleFont.setFontName("Arial");
//
//		// Header , Rows Style
//		Font defaultFont = wb.createFont();
//		defaultFont.setFontHeightInPoints((short) 13);
//		defaultFont.setFontName("Arial");
//
//		Map<String, CellStyle> styles = new HashMap<>();
//
//		CellStyle  cellTitleStyle =  wb.createCellStyle();
//		//cellTitleStyle.setAlignment(CellStyle.ALIGN_CENTER);
//		//cellTitleStyle.setAlignment(CellStyle.ALIGN_CENTER);
//		//cellTitleStyle.setAlignment(CellStyle.ALIGN_CENTER_SELECTION);
//		//cellTitleStyle.setAlignment(cellTitleStyle.ALIGN_CENTER_SELECTION);
//		cellTitleStyle.setAlignment((short)1);
//
//
//
//		cellTitleStyle.setFont(titleFont);
//		styles.put("title", cellTitleStyle);
//
//		CellStyle cellHeaderStyle = wb.createCellStyle();
//		cellHeaderStyle.setFillForegroundColor(IndexedColors.GREY_50_PERCENT.getIndex());
//		cellHeaderStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
//		cellHeaderStyle.setAlignment(CellStyle.ALIGN_CENTER);
//		styles.put("header", cellHeaderStyle);
//
//		CellStyle cellDataStyle = wb.createCellStyle();
//		cellDataStyle.setAlignment(CellStyle.ALIGN_LEFT);
//		styles.put("rows", cellDataStyle);
//
//
//		// Merge and combine cells, apply title style to cells.
//		if (maxCol > 0) {
//
//			sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, maxCol - 1));
//			cell = sheet.createRow(0).createCell(0);
//			cell.setCellValue(title);
//			cell.setCellStyle(styles.get("title"));
////			HSSFRow mergeRow = (HSSFRow) sheet.createRow(0);
////			HSSFCell excelCell = mergeRow.createCell(0);
////			excelCell.setCellValue(title);
////			HSSFCellStyle titleStyle = (HSSFCellStyle) wb.createCellStyle();
////			titleStyle.setAlignment(ALIGN_CENTER_SELECTION);
////			excelCell.setCellStyle(titleStyle);
//
//
//			//excelCell.setCellStyle(styles.get("title"));
//
//			sheet.createRow(rowNo).createCell(colNo).setCellValue(title);
//			sheet.addMergedRegion(new CellRangeAddress(rowNo + 1, rowNo + 1, colNo, colNo + maxCol - 1));
//		}
//
//		rowNo++;
//		rowNo++;
//		// create a header
//		row = sheet.createRow(rowNo);
//		for (int i = 0; i < maxCol; i++) {
//			cell = row.createCell(i);
//			cell.setCellValue(headerList.get(i));
//			cell.setCellStyle(styles.get("header"));
//		}
//
//		// create rows
//		for (int i = 0; i < rowsList.size(); i++) {
//			rowNo++;
//			row = sheet.createRow(rowNo);
//			for (int j = 0; j < rowsList.get(i).size(); j++) {
//				cell = row.createCell(j);
//				cell.setCellValue(rowsList.get(i).get(j));
//				cell.setCellStyle(styles.get("rows"));
//			}
//		}
//		CellRangeAddress cellRangeAdress = new CellRangeAddress(2, rowNo, 0, maxCol - 1);
//		final short borderMediumDashed = CellStyle.BORDER_MEDIUM;
//		RegionUtil.setBorderBottom(borderMediumDashed, cellRangeAdress, sheet, wb);
//		RegionUtil.setBorderTop(borderMediumDashed, cellRangeAdress, sheet, wb);
//		RegionUtil.setBorderLeft(borderMediumDashed, cellRangeAdress, sheet, wb);
//		RegionUtil.setBorderRight(borderMediumDashed, cellRangeAdress, sheet, wb);
//		FileOutputStream fs = null;
//		fs = new FileOutputStream("C:\\test/test.xls");
//		wb.write(fs);
//		fs.close();
//	}

	private HSSFFont createFont(short fontHeightInPoints, short fontColor, short boldWeight, String fontName, byte underline/*HSSFFont.U_NONE*/) {
		HSSFFont font = workbook.createFont();
		font.setFontHeightInPoints(fontHeightInPoints);
		font.setColor(fontColor);
		font.setBoldweight(boldWeight);
		if(!StringUtils.isEmpty(fontName)) {
			font.setFontName(fontName);
		} else {
			font.setFontName("¸¼Àº °íµñ");
		}
		font.setUnderline(underline);
		return font;
	}

	protected HSSFCellStyle createCustomCellStyle(short bgColor, short align, short valign, HSSFFont font){
		HSSFCellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		cellStyle.setFillForegroundColor(bgColor);
		cellStyle.setAlignment(align);
		cellStyle.setVerticalAlignment(valign);
		if(font !=null){
			cellStyle.setFont(font);
		}
		return cellStyle;
	}

	protected HSSFCellStyle createCustomCellStyle(short bgColor, short align, short valign, short fontHeightInPoints, short fontColor, short boldWeight, byte underline){
		HSSFFont font = createFont(fontHeightInPoints, fontColor, boldWeight, null, underline);
		return createCustomCellStyle(bgColor, align, valign, font);
	}

	protected HSSFCellStyle createHeaderCellStyle(){
		HSSFCellStyle headerStyle = createCustomCellStyle(
				HSSFColor.GREY_25_PERCENT.index,
				HSSFCellStyle.ALIGN_CENTER,
				HSSFCellStyle.VERTICAL_CENTER,
				(short) 10, HSSFColor.BLACK.index, HSSFFont.BOLDWEIGHT_BOLD,
				HSSFFont.U_NONE);
		setBorderStyleToCellStyle(headerStyle, HSSFColor.GREY_50_PERCENT.index, HSSFCellStyle.BORDER_THIN);
		headerStyle.setWrapText(true);
		return headerStyle;
	}

	private void setBorderStyleToCellStyle(HSSFCellStyle cellStyle, short borderColor, short borderStyle){
		cellStyle.setLeftBorderColor(borderColor);
        cellStyle.setRightBorderColor(borderColor);
        cellStyle.setTopBorderColor(borderColor);
        cellStyle.setBottomBorderColor(borderColor);
        cellStyle.setBorderLeft(borderStyle);
        cellStyle.setBorderRight(borderStyle);
        cellStyle.setBorderTop(borderStyle);
        cellStyle.setBorderBottom(borderStyle);
	}

	protected HSSFCellStyle createTitleCellStyle(short fontHeightInPoints, short fontColor, byte underline, boolean setBorder) {
		HSSFFont font = createFont(fontHeightInPoints, fontColor, HSSFFont.BOLDWEIGHT_BOLD, null, underline);
		HSSFCellStyle cellStyle = createCustomCellStyle(HSSFColor.WHITE.index, HSSFCellStyle.ALIGN_CENTER, HSSFCellStyle.VERTICAL_CENTER, font);
		if(setBorder) {
			setBorderStyleToCellStyle(cellStyle, HSSFColor.GREY_50_PERCENT.index, HSSFCellStyle.BORDER_THIN);
			cellStyle.setWrapText(true);
		}
		return cellStyle;
	}

	protected HSSFCellStyle createTitleCellStyle(short fontHeightInPoints, boolean setBorder) {
		return createTitleCellStyle(fontHeightInPoints, HSSFColor.BLACK.index, HSSFFont.U_NONE, setBorder);
	}

	/** Á¦¸ñ Ãâ·Â¿ë Style*/
	protected HSSFCellStyle createTitleCellStyle()  {
		return createTitleCellStyle((short) 12, false);
	}

	/** ÁÖ¾îÁø ÁÙÀ» ÄÃ·³¼ö¸¸Å­ °¡·Îº´ÇÕ(ÁÖ·Î Á¦¸ñºÎºÐ ÁÙ¿¡ Àû¿ë) */
	protected void mergeHorizontalByColumnCount(HSSFSheet excelSheet, int atRownum, int maxCol) {
		mergeHorizontal(excelSheet, atRownum, 0, maxCol);
	}

	/**
	 * ¿¢¼¿ ¼¿À» °¡·Î Merge
	 * @param excelSheet ¿¢¼¿ ½ÃÆ®
	 * @param rownum ´ë»ó¼¿ RowIndex
	 * @param cellnum ´ë»ó¼¿ ColumnIndex
	 * @param colSpan °¡·Î ¼¿ Æø
	 */
	protected void mergeHorizontal(HSSFSheet excelSheet, int rownum, int cellnum, int colSpan) {

		logger.info(" rownum: {}, rownum: {}, cellnum: {}, cellnum + colSpan-1: {} ", rownum, rownum, cellnum, cellnum + colSpan-1);

		if(colSpan > 0) {
			excelSheet.addMergedRegion(new CellRangeAddress(rownum, rownum, cellnum, cellnum + colSpan-1));
//			excelSheet.addMergedRegion(new CellRangeAddress(2, 2, 0, 3));
		}
	}

//	public renderTitle()

    @Test
	public void aaa() throws Exception {

		String title = "testTitle";
		String groupHead = "°¡,³ª,´Ù";
		String groupHeadColNo = "0,3,4";
		String head = "A,B,C,D,E,F,G";
		String row1 = "1,2,3,4";
		String row2 = "5,6,7,8";

		ArrayList<String> groupHeadList = new ArrayList<String>(Arrays.asList(groupHead.split(",")));
		ArrayList<String> groupHeadColNoList = new ArrayList<String>(Arrays.asList(groupHeadColNo.split(",")));

		ArrayList<String> headerList = new ArrayList<String>(Arrays.asList(head.split(",")));
		ArrayList<ArrayList<String>> rowsList = new ArrayList<ArrayList<String>>();
		ArrayList<String> rowdata1 = new ArrayList<String>(Arrays.asList(row1.split(",")));
		ArrayList<String> rowdata2 = new ArrayList<String>(Arrays.asList(row2.split(",")));
		rowsList.add(rowdata1);
		rowsList.add(rowdata2);

//		AbleExcelCommand2 command = new AbleExcelCommand2(groupHeadList, groupHeadColNoList, headerList, rowsList);
		AbleExcelCommand2 command = new AbleExcelCommand2(null, null, headerList, rowsList);

		command.setFilename("°øÀå°ü¸®");
		command.setTitle("°øÀå°ü¸®");
		command.setSheetName("°øÀå°ü¸®");
		//HSSFWorkbook workbook = new HSSFWorkbook();
		//command.buildExcelDocument(workbook, null, null);
		command.buildExcelDocument(workbook,null,null);


//		model.addAttribute(AbleExcelCommand.MODEL_KEY, command);

//		return ableExcelView;

//		workbook = new HSSFWorkbook();
//		HSSFSheet excelSheet = workbook.createSheet("test");
//		excelSheet.setDefaultColumnWidth(1300);
////		HSSFRow excelRow = null;
//		Cell cell = null;
//		int rowNo = 0;
//		int colNo = 0;
//		int maxCol =  headerList.size();
//
//		rowNo = renderTitle(excelSheet, rowNo);
//		rowNo = renderSubtitle(excelSheet, rowNo);

//		int rowCount = rowsList.size();
//		HSSFRow excelRow = excelSheet.createRow(0);
//		HSSFCell excelCell = excelRow.createCell(0);
//		HSSFCellStyle titleStyle = createTitleCellStyle();
//		excelCell.setCellStyle(titleStyle);

		//ÄÃ·³¼ö¸¸Å­ ¼¿ °¡·Î º´ÇÕ
//		mergeHorizontalByColumnCount(excelSheet, rowNo, maxCol);
//		rowNo++;
//		excelCell.setCellValue(title);

//		rownum = renderTitle(excelSheet, rownum);

//		maxCol = renderCustomSubTitle(excelSheet, maxCol);


		// Title Font
//		Font titleFont = wb.createFont();
//		titleFont.setFontHeightInPoints((short) 20);
//		titleFont.setFontName("Arial");
//
//		CellStyle  cellTitleStyle =  wb.createCellStyle();
//		cellTitleStyle.setFont(titleFont);
//		Map<String, CellStyle> styles = new HashMap<>();
//		styles.put("title", cellTitleStyle);
//
//		// Header , Rows Style
//		Font defaultFont = wb.createFont();
//		defaultFont.setFontHeightInPoints((short) 13);
//		defaultFont.setFontName("Arial");
//
//		cellTitleStyle.setAlignment((short)1);
//
//		// Merge and combine cells, apply title style to cells.
//		if (maxCol > 0) {
//
//			excelSheet.addMergedRegion(new CellRangeAddress(0, 0, 0, maxCol - 1));
//			cell = excelSheet.createRow(0).createCell(0);
//			cell.setCellValue(title);
//			cell.setCellStyle(styles.get("title"));
////			HSSFRow mergeRow = (HSSFRow) sheet.createRow(0);
////			HSSFCell excelCell = mergeRow.createCell(0);
////			excelCell.setCellValue(title);
////			HSSFCellStyle titleStyle = (HSSFCellStyle) wb.createCellStyle();
////			titleStyle.setAlignment(ALIGN_CENTER_SELECTION);
////			excelCell.setCellStyle(titleStyle);
//
//
//			//excelCell.setCellStyle(styles.get("title"));
//
//			excelSheet.createRow(rowNo).createCell(colNo).setCellValue(title);
//			excelSheet.addMergedRegion(new CellRangeAddress(rowNo + 1, rowNo + 1, colNo, colNo + maxCol - 1));
//		}

//		CellStyle cellHeaderStyle = wb.createCellStyle();
//		cellHeaderStyle.setFillForegroundColor(IndexedColors.GREY_50_PERCENT.getIndex());
//		cellHeaderStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
//		cellHeaderStyle.setAlignment(CellStyle.ALIGN_CENTER);
//		styles.put("header", cellHeaderStyle);
//
//		rowNo++;
//		rowNo++;
//		// create a header
//		excelRow = excelSheet.createRow(rowNo);
//		for (int i = 0; i < maxCol; i++) {
//			cell = excelRow.createCell(i);
//			cell.setCellValue(headerList.get(i));
//			cell.setCellStyle(styles.get("header"));
//		}
//
//		CellStyle cellDataStyle = wb.createCellStyle();
//		cellDataStyle.setAlignment(CellStyle.ALIGN_LEFT);
//		styles.put("rows", cellDataStyle);
//
//		// create rows
//		for (int i = 0; i < rowsList.size(); i++) {
//			rowNo++;
//			excelRow = excelSheet.createRow(rowNo);
//			for (int j = 0; j < rowsList.get(i).size(); j++) {
//				cell = excelRow.createCell(j);
//				cell.setCellValue(rowsList.get(i).get(j));
//				cell.setCellStyle(styles.get("rows"));
//			}
//		}
//		CellRangeAddress cellRangeAdress = new CellRangeAddress(2, rowNo, 0, maxCol - 1);
//		final short borderMediumDashed = CellStyle.BORDER_MEDIUM;
//		RegionUtil.setBorderBottom(borderMediumDashed, cellRangeAdress, excelSheet, wb);
//		RegionUtil.setBorderTop(borderMediumDashed, cellRangeAdress, excelSheet, wb);
//		RegionUtil.setBorderLeft(borderMediumDashed, cellRangeAdress, excelSheet, wb);
//		RegionUtil.setBorderRight(borderMediumDashed, cellRangeAdress, excelSheet, wb);
		FileOutputStream fs = null;
		fs = new FileOutputStream("C:\\test/test.xls");
		workbook.write(fs);
		fs.close();
	}


}
