<aspectj>
    <aspects>
        <!--
        Instrument classes and methods not covered by plugins by creating concrete-aspects here.
        The methods will be collected using the CustomConcretizedOperationCollectionAspect which will
        collect parameters and return values.

        These concrete-aspects must extend CustomConcretizedOperationCollectionAspect and use the named
        pointcut "collectionPoint".
        -->

        <!--
        Example Concrete Aspect: Instrument "ExampleMethod"

        <concrete-aspect name="com.example.ExampleAspect"
                         extends="com.springsource.insight.collection.method.custom.CustomConcretizedOperationCollectionAspect">
            <pointcut name="collectionPoint"
                      expression="execution(* com.example.ExampleClass.ExampleMethod(..))"/>
        </concrete-aspect>
        -->
		
		<!--
		It is possible to assign a score to the endpoints generated by the
		aspect by using a collection setting named 'insight.collection.custom-aop.XXX.score'
		where XXX is the simple aspect name (i.e., the name after stripping
		the package name). The supported values are:
		
			default - the endpoint's score is based on its location
		 	in the trace tree. The higher up the tree the intercepted API is found
		 	the higher its score, and it is more likely to become the representative
		 	endpoint for the trace. Note: this also the default scoring if
		 	no setting is specified.

		 	minimum - kind of a "catch-all" score that basically
		 	indicates that if no other "better" endpoint is found, then the
		 	intercepted API is the endpoint

		 	top - trumps the 'minimum' score

		 	ceiling - trumps the 'top' score

		 	nnnn - a fixed integer value - if positive, then it trumps any of
			the other scores (except other higher positive ones). Note:
			negative values are reserved for internal use and should not be used
			(though this restriction is not enforced for several implementation related reasons)
		
		It is also possible to control the generated endpoint name, label and example
		strings of the endpoint analysis phase via the respective 'insight.collection.custom-aop.XXX.endPoint',
		'insight.collection.custom-aop.XXX.resourceLabel' and 'insight.collection.custom-aop.XXX.example'
		collection settings. These values can also include 'dynamic' modifiers - such as
		the class/method name, signature and even argument values. See @InsightEndPoint
		annotation for the available modifiers and their meanings
		 -->
    </aspects>
</aspectj>