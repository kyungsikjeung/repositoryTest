/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Pivotal tc Runtime 3.1.2.RELEASE/7.0.64.B.RELEASE
 * Generated at: 2016-06-03 12:02:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.innorix.InnoDS;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import java.lang.*;
import java.math.*;
import java.security.*;
import com.innorix.servlet.multipartrequest.MultipartRequest;
import com.innorix.servlet.compress.Compress;
import com.innorix.servlet.integrity.Integrity;
import com.innorix.servlet.transfer.InnorixTransfer;

public final class upload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {


private String delimiterReplace(String fullDir)
{
	String ret1 = fullDir.replaceAll("\\\\+", "/");
	String ret2 = ret1.replaceAll("\\/+", "/");

	return ret2;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

// 파일이 저장될 서버측 전체경로
String saveDir = delimiterReplace(request.getRealPath(request.getServletPath()));
saveDir = saveDir.substring(0, saveDir.lastIndexOf("/") + 1) + "data";

int maxPostSize = 2147483000;	// bytes

InnorixTransfer innoTransfer = new InnorixTransfer(request, response, maxPostSize, "UTF-8", saveDir);

String actionFlag		= innoTransfer.GetParameter("_action");					// 동작 구분 getFileInfo(업로드 정보 생성) | attachFile(파일전송) | attachFileCompleted(전송완료)
String uniqueFname		= innoTransfer.GetParameter("_unique_filename");		// 전송 파일의 유니크한 이름
String origFname		= innoTransfer.GetParameter("_orig_filename");			// 원본 파일명
String saveFname		= innoTransfer.GetParameter("_new_filename");			// 저장 파일명
String fileSize			= innoTransfer.GetParameter("_filesize");				// 원본 사이즈
String startOffset		= innoTransfer.GetParameter("_start_offset");			// 전달 되는 분할 파일의 시작 지점
String endOffset		= innoTransfer.GetParameter("_end_offset");				// 전달 되는 분할 파일의 종료 지점

System.out.println("---------------------------------------------------");
System.out.println("uniqueFname \t: " + uniqueFname);
System.out.println("actionFlag \t: " + actionFlag);
System.out.println("origFname \t: " + origFname);
System.out.println("saveFname \t: " + saveFname);
System.out.println("fileSize \t: " + fileSize);
System.out.println("startOffset \t: " + startOffset);
System.out.println("endOffset \t: " + endOffset);

// 중복 파일 존재시 강제 덮어쓰기 설정
innoTransfer.SetOverwrite(false);

// 저장 파일명을 타임스탬프+확장자 형식으로 변경
if (origFname != null)
{
	int ext_pos = origFname.lastIndexOf(".");
	String ext = origFname.substring(ext_pos);
	Date time = new Date();
	saveFname = time.getTime()+ext;
}

// 업로드 파일 저장
String result = innoTransfer.Save(saveFname);
System.out.println("Save(); \t: " + result);

/*
	Save() 함수 리턴값
	- 0000 정상
	- 0001 경로 없음
	- 0002 쓰기 권한 없음
	- 0003 무결성 검사 실패
	- 1001 디렉토리 생성실패
	- 1002 압축해제 실패
*/

if (result == "0002")
{
    // 예외 발생시 클라이언트에 전달할 개발자 정의 코드와 메세지
    // innoTransfer.ShowCustomError("1000(*고정값)", 메세지, 상세내용, 사용자측 재 전송시도 유무 );
    innoTransfer.ShowCustomError("1000", "파일저정 예외사항 발생", "서버측 경로에 쓰기 권한이 존재하지 않습니다!!", false);
}

// 개별 파일 업로드 시작시점
if (actionFlag.equals("getFileInfo"))
{
	System.out.println("---------------------------------------------------");
	System.out.println(uniqueFname + " # start upload");
}

// 개별 파일 업로드 완료시점
if (actionFlag.equals("attachFileCompleted"))
{
	System.out.println("---------------------------------------------------");
	System.out.println(uniqueFname + " # upload done");
}

      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
